// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Scrapes and notifies users of open seats
	// (GET /cron/checktrackedsections)
	CheckTrackedSections(ctx echo.Context) error
	// Cleans up any stale tracked sections
	// (GET /cron/prunetrackedsections)
	PruneTrackedSections(ctx echo.Context) error
	// Gets the courses for a department
	// (GET /department/courses)
	GetCoursesForDepartment(ctx echo.Context, params GetCoursesForDepartmentParams) error
	// Gets the list of departments at MSU
	// (GET /departments)
	GetDepartments(ctx echo.Context) error
	// Gets general info about the web app
	// (GET /meta)
	GetMeta(ctx echo.Context) error
	// Gets the sections for a course
	// (GET /sections)
	GetSections(ctx echo.Context, params GetSectionsParams) error
	// Receives SMS data
	// (POST /service/sms/receive)
	ReceiveSMS(ctx echo.Context) error
	// Gets user data for the specified user
	// (GET /users/{userID})
	GetUserData(ctx echo.Context, userID string) error
	// Updates or sets userdata for the user
	// (PUT /users/{userID})
	UpdateUserData(ctx echo.Context, userID string) error
	// Removes the user from the specified section
	// (DELETE /users/{userID}/section/{sectionID})
	RemoveTrackedSectionForUser(ctx echo.Context, userID string, sectionID string) error
	// Gets tracked sections for the specified user
	// (GET /users/{userID}/sections)
	GetTrackedSectionsForUser(ctx echo.Context, userID string) error
	// Adds tracked sections for the specified user
	// (PUT /users/{userID}/sections)
	AddTrackedSectionsForUser(ctx echo.Context, userID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CheckTrackedSections converts echo context to params.
func (w *ServerInterfaceWrapper) CheckTrackedSections(ctx echo.Context) error {
	var err error

	ctx.Set("appengineApiAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CheckTrackedSections(ctx)
	return err
}

// PruneTrackedSections converts echo context to params.
func (w *ServerInterfaceWrapper) PruneTrackedSections(ctx echo.Context) error {
	var err error

	ctx.Set("appengineApiAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PruneTrackedSections(ctx)
	return err
}

// GetCoursesForDepartment converts echo context to params.
func (w *ServerInterfaceWrapper) GetCoursesForDepartment(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCoursesForDepartmentParams
	// ------------- Required query parameter "term" -------------

	err = runtime.BindQueryParameter("form", true, true, "term", ctx.QueryParams(), &params.Term)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter term: %s", err))
	}

	// ------------- Required query parameter "deptAbbr" -------------

	err = runtime.BindQueryParameter("form", true, true, "deptAbbr", ctx.QueryParams(), &params.DeptAbbr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deptAbbr: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCoursesForDepartment(ctx, params)
	return err
}

// GetDepartments converts echo context to params.
func (w *ServerInterfaceWrapper) GetDepartments(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDepartments(ctx)
	return err
}

// GetMeta converts echo context to params.
func (w *ServerInterfaceWrapper) GetMeta(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMeta(ctx)
	return err
}

// GetSections converts echo context to params.
func (w *ServerInterfaceWrapper) GetSections(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSectionsParams
	// ------------- Required query parameter "term" -------------

	err = runtime.BindQueryParameter("form", true, true, "term", ctx.QueryParams(), &params.Term)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter term: %s", err))
	}

	// ------------- Required query parameter "deptAbbr" -------------

	err = runtime.BindQueryParameter("form", true, true, "deptAbbr", ctx.QueryParams(), &params.DeptAbbr)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter deptAbbr: %s", err))
	}

	// ------------- Required query parameter "course" -------------

	err = runtime.BindQueryParameter("form", true, true, "course", ctx.QueryParams(), &params.Course)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter course: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSections(ctx, params)
	return err
}

// ReceiveSMS converts echo context to params.
func (w *ServerInterfaceWrapper) ReceiveSMS(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ReceiveSMS(ctx)
	return err
}

// GetUserData converts echo context to params.
func (w *ServerInterfaceWrapper) GetUserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUserData(ctx, userID)
	return err
}

// UpdateUserData converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUserData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUserData(ctx, userID)
	return err
}

// RemoveTrackedSectionForUser converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveTrackedSectionForUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	// ------------- Path parameter "sectionID" -------------
	var sectionID string

	err = runtime.BindStyledParameter("simple", false, "sectionID", ctx.Param("sectionID"), &sectionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sectionID: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RemoveTrackedSectionForUser(ctx, userID, sectionID)
	return err
}

// GetTrackedSectionsForUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetTrackedSectionsForUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTrackedSectionsForUser(ctx, userID)
	return err
}

// AddTrackedSectionsForUser converts echo context to params.
func (w *ServerInterfaceWrapper) AddTrackedSectionsForUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userID" -------------
	var userID string

	err = runtime.BindStyledParameter("simple", false, "userID", ctx.Param("userID"), &userID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userID: %s", err))
	}

	ctx.Set("bearerAuth.Scopes", []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddTrackedSectionsForUser(ctx, userID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/cron/checktrackedsections", wrapper.CheckTrackedSections)
	router.GET(baseURL+"/cron/prunetrackedsections", wrapper.PruneTrackedSections)
	router.GET(baseURL+"/department/courses", wrapper.GetCoursesForDepartment)
	router.GET(baseURL+"/departments", wrapper.GetDepartments)
	router.GET(baseURL+"/meta", wrapper.GetMeta)
	router.GET(baseURL+"/sections", wrapper.GetSections)
	router.POST(baseURL+"/service/sms/receive", wrapper.ReceiveSMS)
	router.GET(baseURL+"/users/:userID", wrapper.GetUserData)
	router.PUT(baseURL+"/users/:userID", wrapper.UpdateUserData)
	router.DELETE(baseURL+"/users/:userID/section/:sectionID", wrapper.RemoveTrackedSectionForUser)
	router.GET(baseURL+"/users/:userID/sections", wrapper.GetTrackedSectionsForUser)
	router.PUT(baseURL+"/users/:userID/sections", wrapper.AddTrackedSectionsForUser)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ZvOvAAAA///6+X4Z7TMAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
